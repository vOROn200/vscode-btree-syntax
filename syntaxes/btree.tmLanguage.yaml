$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Btree
patterns:
- include: '#includes'
- include: '#strings'
- include: '#structures'
- include: '#decorators'
- include: '#comments'
- include: '#brackets'
- include: '#vars'
repository:
  brackets:
    patterns:
    - name: punctuation.brackets.attribute.btree
      match: '[\[\]]'
  includes:
    name: keyword.control.include.btree
    begin: \b\w+\b(?=\s*\()
    end: (?<=\))\s*
    patterns:
    - name: punctuation.parenthesis.open.btree
      match: \(
    - include: '#strings'
    - name: punctuation.parenthesis.close.btree
      match: \)
  strings:
    patterns:
    - name: string.quoted.double.btree
      begin: '"'
      end: '"'
    - name: string.quoted.single.btree
      begin: ''''
      end: ''''
  structures:
    patterns:
    - name: keyword.control.structure.btree
      match: \b(sequence|fallback|parallel|sequence_memory|fallback_memory|parallel_memory)\b|(?!\w+)\?\*|->\*|=>\*|\?|->|=>
    - name: entity.name.type.structure.btree
      match: \b(\w+)\b(?=\s*\{)
    - begin: '\{'
      end: '\}'
      beginCaptures:
        '0':
          name: punctuation.brace.curly.open.btree
      endCaptures:
        '0':
          name: punctuation.brace.curly.close.btree
      name: meta.structure.block.btree
      patterns:
      - include: '#structures'
      - include: '#actions_and_conditions'
      - include: '#decorators'
      - include: '#references'
      - include: '#brackets'
      - include: '#comments'
      - include: '#strings'
  actions_and_conditions:
    patterns:
    - name: entity.name.function.action.btree
      begin: \b\w+\b(?=\()
      end: (?=\()
    - name: entity.name.function.condition.btree
      begin: \b\w+\b\?(?=\()
      end: (?=\()
    - begin: '\('
      end: '\)'
      beginCaptures:
        '0':
          name: punctuation.parenthesis.open.btree
      endCaptures:
        '0':
          name: punctuation.parenthesis.close.btree
    - name: storage.type.as.btree
      match: \bas\b
    - include: '#mock_status' 
  comments:
    patterns:
    - name: comment.block.btree
      begin: \/\*
      end: \*\/
  decorators:
    patterns:
    - name: storage.type.decorator.btree
      match: \@(inverter|!|fail_is_success|success_is_fail|fail_is_running|success_is_running|force_success|force_fail|repeat_until_fail|repeat_until_success|repeat|retry|delay|timeout)
    - name: variable.numeric.index.btree
      match: (?<=\[)(\d+)(?=\])
    - name: storage.type.decorator.if.btree
      begin: '@if'
      end: '\)'
      endCaptures:
        '0':
          name: punctuation.parenthesis.close.btree
      patterns:
        - name: punctuation.parenthesis.open.btree
          match: '\('
        - include: '#logical_expression'
  mock_status:
    name: variable.other.mock_status.btree
    match: \b(failure|success|running|ignored|none)\b
  references:
    name: entity.name.type.reference.btree
    match: \b([\u0400-\u04FF]|[a-zA-Z])([\u0400-\u04FFa-zA-Z0-9_]|[a-zA-Z0-9_])*\b
  logical_expression:
      patterns:
      - name: constant.language.boolean.btree
        match: \b(true|false)\b 

      - name: constant.numeric.float.btree
        match: \b\d+\.\d+\b

      - name: constant.numeric.integer.btree
        match: \b\d+\b 

      - name: variable.expression.btree
        match: \b\w+\b

      - name: keyword.operator.logical.btree
        match: (&&|\|\|) 

      - name: keyword.operator.comparison.btree
        match: (==|!=|<=|>=|<|>)

      - name: string.quoted.double.btree
        begin: '"'
        end: '"'
        contentName: string.content.double.btree
  vars:
      patterns:
      - name: constant.language.boolean.btree
        match: \b(true|false)\b 

      - name: constant.numeric.float.btree
        match: \b\d+\.\d+\b

      - name: constant.numeric.integer.btree
        match: \b\d+\b 

      - name: variable.other.btree
        match: \b\w+\b

      - name: keyword.operator.assignment.btree
        match: \=

      - name: string.quoted.double.btree
        begin: '"' 
        end: '"'
        contentName: string.content.double.btree

      - name: string.quoted.single.btree
        begin: "'"
        end: "'"
        contentName: string.content.single.btree    
scopeName: source.btree
